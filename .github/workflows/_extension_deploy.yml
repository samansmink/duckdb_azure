# This workflow needs to live in the extension repo to be able to receive secrets such as deploy keys

name: Extension Deployment
on:
  workflow_call:
    inputs:
      # The name with which the extension will be built
      extension_name:
        required: true
        type: string
      # DuckDB version to build against
      duckdb_version:
        required: true
        type: string
      # ';' separated list of architectures to exclude, for example: 'linux_amd64;osx_arm64'
      exclude_archs:
        required: false
        type: string
        default: ""
      set_latest:
        required: false
        type: boolean
        default: false
      artifact_postfix:
        required: false
        type: string
        default: ""
      # Allows overriding the default s3 deploy script with a custom script
      deploy_script:
        required: false
        type: string
        default: "./scripts/extension-upload-oote.sh"
      matrix_parse_script:
        required: false
        type: string
        default: "./scripts/modify_distribution_matrix.py"

jobs:
  generate_matrix:
    name: Generate deployment matrix
    runs-on: ubuntu-latest
    outputs:
      deploy_matrix: ${{ steps.parse-matrices.outputs.deploy_matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - id: parse-matrices
        run: |
          python3 ${{ inputs.matrix_parse_script }} --input .github/config/distribution_matrix.json --deploy_matrix --output deploy_matrix.json --exclude "${{ inputs.exclude_archs }}" --pretty 
          deploy_matrix="`cat deploy_matrix.json`"
          echo deploy_matrix=$deploy_matrix >> $GITHUB_OUTPUT
          echo `cat $GITHUB_OUTPUT`

  linux:
    name: Deploy Linux
    runs-on: ubuntu-latest
    needs: generate_matrix
    if: ${{ needs.generate_matrix.outputs.deploy_matrix != '{}' && needs.generate_matrix.outputs.deploy_matrix != '' }}
    strategy:
      matrix: ${{fromJson(needs.generate_matrix.outputs.deploy_matrix)}}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: 'true'

      - name: Checkout DuckDB to version
        run: |
          cd duckdb
          git checkout ${{ inputs.duckdb_version }}

      - uses: actions/download-artifact@v2
        with:
          name: ${{ inputs.extension_name }}-${{ inputs.duckdb_version }}-extension-${{matrix.duckdb_arch}}${{inputs.artifact_postfix}}
          path: |
            /tmp/${{ inputs.extension_name }}.duckdb_extension

      - name: Deploy
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_DEPLOY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_DEPLOY_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.S3_REGION }}
          BUCKET_NAME: ${{ secrets.S3_BUCKET }}
          DUCKDB_EXTENSION_SIGNING_PK: ${{ secrets.DUCKDB_EXTENSION_SIGNING_KEY }}
        run: |
          pwd
          ls -l /tmp
          file /tmp/${{ inputs.extension_name }}.duckdb_extension
          ls -l /tmp/${{ inputs.extension_name }}.duckdb_extension
          python3 -m pip install pip awscli
          git config --global --add safe.directory '*'
          cd duckdb
          git fetch --tags
          export DUCKDB_VERSION=`git tag --points-at HEAD`
          export DUCKDB_VERSION=${DUCKDB_VERSION:=`git log -1 --format=%h`}
          cd ..
          git fetch --tags
          export EXT_VERSION=`git tag --points-at HEAD`
          export EXT_VERSION=${EXT_VERSION:=`git log -1 --format=%h`}
          ${{ inputs.deploy_script }} ${{ inputs.extension_name }} $DUCKDB_VERSION $EXT_VERSION $BUCKET_NAME ${{inputs.set_latest || 'true' && 'false'}}