# Reusable workflow for building DuckDB extensions using a standardized environment
#
# The workflow:
#   - builds the extension using the CI workflow from the corresponding DuckDB version
#   - uploads the extensions as gh actions artifacts in the following format:
#         <ext_name>-<duckdb_version>-extension-<arch><optional_postfix>
#
# note: extensions are simply uploaded to GitHub actions, deploying the extensions is done a separate step. More info on
#       on this can be found in https://github.com/duckdb/extension-template

name: Extension distribution
on:
  workflow_call:
    inputs:
      # The name with which the extension will be built
      extension_name:
        required: true
        type: string
      # GitHub ref of the extension repo
      extension_ref:
        required: true
        type: string
      # DuckDB version to build against
      duckdb_version:
        required: true
        type: string
      # Json formatted list of excluded target architectures, e.g. "[ 'linux_amd64', 'linux_amd64_gcc4' ]"
      exclude_archs:
        required: false
        type: string
        default: "[]"
      # postfix added to artifact names. Can be used to guarantee unique names when this workflow is called multiple times
      artifact_postfix:
        required: false
        type: string
        default: ""
      # override the default vcpkg commit used by this version of DuckDB
      vcpkg_commit:
        required: false
        type: string
        default: "501db0f17ef6df184fcdbfbe0f87cde2313b6ab1"

jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      linux_matrix: ${{ steps.set-matrix.outputs.linux_matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - id: set-matrix
        run: |                  
          echo "linux_matrix={\"include\":`cat .github/config/distribution_matrix_linux.json`}" >> $GITHUB_OUTPUT

  linux:
    name: Release
    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    needs: matrix_prep
    strategy:
      matrix: ${{fromJson(needs.matrix_prep.outputs.linux_matrix)}}
    env:
      VCPKG_TARGET_TRIPLET: ${{ matrix.vcpkg_triplet }}
      VCPKG_TOOLCHAIN_PATH: ${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
      GEN: Ninja

    steps:
      - name: Install required ubuntu packages
        if: ${{ matrix.duckdb_arch == 'linux_amd64' || matrix.duckdb_arch == 'linux_arm64' }}
        run: |
          apt-get update -y -qq
          apt-get install -y -qq software-properties-common
          add-apt-repository ppa:git-core/ppa
          apt-get update -y -qq
          apt-get install -y -qq ninja-build make gcc-multilib g++-multilib libssl-dev wget openjdk-8-jdk zip maven unixodbc-dev libc6-dev-i386 lib32readline6-dev libssl-dev libcurl4-gnutls-dev libexpat1-dev gettext unzip build-essential checkinstall libffi-dev curl libz-dev openssh-client

      - name: Install Git 2.18.5
        if: ${{ matrix.duckdb_arch == 'linux_amd64' || matrix.duckdb_arch == 'linux_arm64' }}
        run: |
          wget https://github.com/git/git/archive/refs/tags/v2.18.5.tar.gz
          tar xvf v2.18.5.tar.gz
          cd git-2.18.5
          make
          make prefix=/usr install
          git --version

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: 'true'

      - name: Checkout DuckDB to version
        run: |
          cd duckdb
          git checkout ${{ inputs.duckdb_version }}

      - name: Setup ManyLinux2014
        if: ${{ matrix.duckdb_arch == 'linux_amd64_gcc4' }}
        run: |
          ./duckdb/scripts/setup_manylinux2014.sh general aws-cli ccache ssh python_alias openssl

      - name: Setup Ccache
        uses: hendrikmuhs/ccache-action@main
        with:
          key: ${{ github.job }}-${{ matrix.duckdb_arch }}

      - name: Setup Ubuntu
        if: ${{ matrix.duckdb_arch == 'linux_amd64' || matrix.duckdb_arch == 'linux_arm64' }}
        uses: ./duckdb/.github/actions/ubuntu_18_setup
        with:
          aarch64_cross_compile: ${{ matrix.duckdb_arch == 'linux_arm64' && 1 }}

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: ${{ inputs.vcpkg_commit }}

      - name: Build extension
        env:
          GEN: ninja
          CC: ${{ matrix.duckdb_arch == 'linux_arm64' && 'aarch64-linux-gnu-gcc' || '' }}
          CXX: ${{ matrix.duckdb_arch == 'linux_arm64' && 'aarch64-linux-gnu-g++' || '' }}
        run: |
          make release

      - name: Test extension
        if: ${{ matrix.duckdb_arch != 'linux_arm64'}}
        run: |
          make test

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ inputs.extension_name }}-${{ inputs.duckdb_version }}-extension-${{matrix.duckdb_arch}}${{inputs.artifact_postfix}}
          path: |
            build/release/extension/${{ inputs.extension_name }}/${{ inputs.extension_name }}.duckdb_extension

  macos:
    name: Release (${{ matrix.duckdb_arch }})
    runs-on: macos-latest
    strategy:
      matrix:
        vcpkg_triplet: [ 'x64-osx', 'arm64-osx' ]
        include:
          - vcpkg_triplet: 'x64-osx'
            osx_build_arch: 'x86_64'
            duckdb_arch: 'osx_amd64'
          - vcpkg_triplet: 'arm64-osx'
            osx_build_arch: 'arm64'
            duckdb_arch: 'osx_arm64'

    env:
      VCPKG_TOOLCHAIN_PATH: ${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
      VCPKG_TARGET_TRIPLET: ${{ matrix.vcpkg_triplet }}
      OSX_BUILD_ARCH: ${{ matrix.osx_build_arch }}
      GEN: Ninja

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: 'true'

      - name: Install Ninja
        run: |
          brew install ninja

      - name: Setup Ccache
        uses: hendrikmuhs/ccache-action@main
        with:
          key: ${{ github.job }}-${{ matrix.duckdb_arch }}

      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Checkout DuckDB to version
        run: |
          cd duckdb
          git checkout ${{ inputs.duckdb_version }}

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: ${{ inputs.vcpkg_commit }}

      - name: Build extension
        shell: bash
        run: |
          make release

      - name: Test Extension
        if: ${{ matrix.osx_build_arch == 'x86_64'}}
        shell: bash
        run: |
          make test

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ inputs.extension_name }}-${{ inputs.duckdb_version }}-extension-${{matrix.duckdb_arch}}${{inputs.artifact_postfix}}
          path: |
            build/release/extension/${{ inputs.extension_name }}/${{ inputs.extension_name }}.duckdb_extension

  windows:
    name: Release
    runs-on: windows-latest
    strategy:
      matrix:
        # Add commits/tags to build against other DuckDB versions
        duckdb_arch: [ 'windows_amd64' ]
        include:
          - duckdb_arch: 'windows_amd64'
            vcpkg_triplet: 'x64-windows-static-md'
        exclude: ${{ fromJson(inputs.exclude_archs) }}
    env:
      GEN: Ninja
      VCPKG_TOOLCHAIN_PATH: ${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
      VCPKG_TARGET_TRIPLET: ${{ matrix.vcpkg_triplet }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: 'true'

      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Checkout DuckDB to version
        run: |
          cd duckdb
          git checkout ${{ inputs.duckdb_version }}

      - name: Setup Ccache
        uses: hendrikmuhs/ccache-action@main
        with:
          key: ${{ github.job }}-${{ matrix.duckdb_arch }}

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: ${{ inputs.vcpkg_commit }}

      - name: Build extension
        run: |
          make release

      - name: Test Extension
        shell: bash
        run: |
          make test

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ inputs.extension_name }}-${{ inputs.duckdb_version }}-extension-${{matrix.duckdb_arch}}${{inputs.artifact_postfix}}
          path: |
            build/release/extension/${{ inputs.extension_name }}/${{ inputs.extension_name }}.duckdb_extension